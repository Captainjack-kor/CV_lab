'use client';
import React, { useState, useEffect } from 'react';
import { motion } from 'motion/react';
import NumberFlow, { useCanAnimate } from '@number-flow/react';
import { ArrowUp } from 'lucide-react';
import { cn } from '@/lib/utils';
const MotionNumberFlow = motion.create(NumberFlow);
const MotionArrowUp = motion.create(ArrowUp);
export function PriceWithDiff({ value, diff }) {
  const canAnimate = useCanAnimate();
  return (
    <>
      <span className="flex items-center justify-center gap-2">
        {/* value를 직접 사용하지 않고, 부모 컴포넌트에서 전달받은 value를 사용 */}
        <NumberFlow
          value={value}
          className="text-5xl font-semibold"
          format={{ style: 'currency', currency: 'USD' }}
        />
        <motion.span
          className={cn(
            diff > 0 ? 'bg-emerald-400' : 'bg-red-500',
            'inline-flex items-center px-[0.3em] text-white transition-colors duration-300'
          )}
          style={{ borderRadius: 999 }}
          layout={canAnimate}
          transition={{ layout: { duration: 0.9, bounce: 0, type: 'spring' } }}>
          {' '}
          <MotionArrowUp
            className="mr-0.5 size-[0.75em]"
            absoluteStrokeWidth
            strokeWidth={3}
            transition={{
              rotate: { type: 'spring', duration: 0.5, bounce: 0 },
            }}
            animate={{ rotate: diff > 0 ? 0 : -180 }}
            initial={false}
          />{' '}
          <MotionNumberFlow
            value={diff}
            className="font-semibold"
            format={{ style: 'percent', maximumFractionDigits: 2 }}
            layout={canAnimate}
            layoutRoot={canAnimate}
          />{' '}
        </motion.span>
      </span>
    </>
  );
}
export default function Index() {
  const numbers = [124.23];
  const diffs = [0.0564];
  // 1. 애니메이션을 위한 임시 값(dummyValue)과 최종 값(finalValue) 상태를 관리합니다.
  const [dummyValue, setDummyValue] = useState(0);
  const [finalValue, setFinalValue] = useState(numbers[0]);
  const [dummyDiff, setDummyDiff] = useState(0);
  const [finalDiff, setFinalDiff] = useState(diffs[0]);
  
  useEffect(() => {
    // 2. 5초마다 애니메이션을 재시작하는 로직을 추가합니다.
    const interval = setInterval(() => {
      // 3. 먼저 값을 0으로 리셋합니다.
      setDummyValue(0);
      setDummyDiff(0);
      // 4. 짧은 지연시간(delay) 후에 원래 값으로 다시 설정합니다.
      //    이렇게 해야 NumberFlow가 0에서부터 애니메이션을 시작합니다.
      setTimeout(() => {
        setDummyValue(numbers[0]);
        setDummyDiff(diffs[0]);
      }, 50); // 50ms 정도의 짧은 딜레이
    }, 5000); // 5초마다 반복

    return () => clearInterval(interval);
  }, []); // 의존성 배열을 비워 컴포넌트 마운트 시 한 번만 실행되도록 합니다.

  return (
    <>
      <PriceWithDiff value={dummyValue} diff={dummyDiff} />
    </>
  );
}
